<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>9. hét - „Helló, Calvin!”</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>

    <section>
        <title>MNIST</title>
        <para>Az alap feladat megoldása, +saját kézzel rajzolt képet is ismerjen fel,
https://progpater.blog.hu/2016/11/13/hello_samu_a_tensorflow-bol Háttérként ezt vetítsük le:
https://prezi.com/0u8ncvvoabcr/no-programming-programming/
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:   
            
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...: A feladat a MNIST-en, vagyis a Modified National of Standards and
            Technology database-en alapul. Az MNIST egy olyan adatbázis amiben több szabadkézzel írott szám található.
            Ezt az adatbázist egy képfeldolgozó rendszer használja machine learning-re. A program az MNIST többtízezer
            képe segítségével ismeri fel, hogy milyen számot ábrázol a saját rajzunk. Maga a gépi tanulás a tensorflow-val
            fog zajlani, ami egy open-source platform.
        </para>
        <para>
            a tensorflow telepítéséhez a "sudo pip3 install tensorflow==1.14" parancsot használtam.
            a python telepítéséhez pedig macos-en a "brew install python" parancsot.
            </para>
    </section>        

    <section>
        <title>Deep MNIST</title>
        <para>
            https://prezi.com/jvvbytkwgsxj/high-level-programming-languages-2-c11-allocators/ a
CustomAlloc-os példa, lásd C forrást az UDPROG repóban!

        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
    </section>   
    
    <section>
        <title>CIFAR-10
 </title>
        <para>
            Az alap feladat megoldása, +saját fotót is ismerjen fel,
https://progpater.blog.hu/2016/12/10/hello_samu_a_cifar-10_tf_tutorial_peldabol
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...: A feladat a CIFAR-10-et másnéven a Canadian
            Institute For Advanced Research-t mutatja be, ami egy machine learningre
            használt adatbázis.
            Ez az egyik leggyakrabban használt gépi tanuló adatbázis. 
            A CIFAT-10 60000 darab 32x32-es képet tud eltárolni. A program olyan tárgyakat tud 
            felismerni, mint például egy autó, kutya, macska, hajó, repülő és stb.
            A CIFAR-10 egy MNIST-hez hasonló program, mivel a célja ugyanaz, annyi
            különbséggel, hogy ez a program tárgyakról készült képeket fog felismerni. A machine learning az előző
            feladat mintájára tensorflow-val készült. A program RGB gépeket fog vizsgálni, a program 10 féle tárgyat tud felismerni
            . Saját kép felismeréségez egy programmal kompatibilissé kell tenni a programhoz.
            
        </para>
        
        <programlisting><![CDATA[
from PIL import Image
import numpy as np
import sys
im = Image.open(sys.argv[1]) im = (np.array(im))
r = im[:,:,0].flatten() g = im[:,:,1].flatten() b = im[:,:,2].flatten() label = [0]
out = np.array(list(label) + list(r) + list(g) + list(b),np.uint8) out.tofile("./cifar10_data/cifar-10-batches-bin/" + sys.argv[2])
        

]]></programlisting>
        <para>
            A fenti kódcsipettel bináris alakra hozhatjuk a képet, ezáltal 
            kompatibilis lesz a programhoz.Ezután a kép nevét megadjuk paraméterbe
            , majd beírjuk a képarányt. A programban még annyit kell
            változtatni, hogy input.binre át kell írni a test_bach.bint.
            Ha egy képet ismerünk fel akkor a cifar10.py-ban a batch sizeot 1re
            kell átírni.
            </para>
        <mediaobject>
            <imageobject>
                <imagedata fileref="cifar10.jpg" scale="30"/>
                </imageobject>
            </mediaobject>
        
    </section>  
    
    <section>
        <title>Android telefonra a TF objektum detektálója
 </title>
        <para>
            Telepítsük fel, próbáljuk ki!


        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat... : A feladat mindössze egy telefonos aplikáció tesztelése volt. 
            A Tensorflow egy nyílt hozzáférésű platform gépi tanuláshoz. Ezen a platformon több ezer képből vizsgálva 
            tanul a mesterséges inteligencia felismerni bizonyos objektumokat. A telefonos applikáción keresztül, 
            a kameránk képét felhasználva real-time detektálhatunk tárgyakat. A detektált tárgyak mellett a program 
            %-os arányban feltünteti, hogy mennyire biztos a detektálás helyességében. Az applikációt a play áruházban 
            letölthetjük ingyenesen és azt megnyitva már tesztelhetjük is a programot.
        </para>
        <para>
            A tapasztalataim szerinte a program meglepően érzékeny bizonyos objektumokra, mint például autókra, vagy emberekre.
            Ez valószínüleg a nagy választékú adatnak köszönhető. Ugyanakkor valamennyi tárgyat hajlandó, vagy összekeverni, vagy 
            tévesen felismerni, például egy egetet képes telefonnak érzékelni, vagy fordítva. Összegezve a program bizonyos helyzetekben
            nagyon pontos, de vannak benne hibás felismerések.
            </para>
        
        
         <mediaobject>
                <imageobject>
                    <imagedata fileref="tensorflow1.jpg" scale="20"/>
                </imageobject>
            </mediaobject>
        <mediaobject>
                <imageobject>
                    <imagedata fileref="tensorflow2.jpg" scale="20"/>
                </imageobject>
            </mediaobject>
        <mediaobject>
                <imageobject>
                    <imagedata fileref="tensorflow3.jpg" scale="20"/>
                </imageobject>
            </mediaobject>
        <mediaobject>
                <imageobject>
                    <imagedata fileref="tensorflow4.jpg" scale="20"/>
                </imageobject>
            </mediaobject>
        <mediaobject>
                <imageobject>
                    <imagedata fileref="tensorflow5.jpg" scale="20"/>
                </imageobject>
            </mediaobject>
        
        
    </section>
    
    <section>
        <title>SMNIST for Machines</title>
        <para>
            Készíts saját modellt, vagy használj meglévőt, lásd: https://arxiv.org/abs/1906.12213
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
    </section>
    
    <section>
        <title>Minecraft MALMO-s példa</title>
        <para>
           A https://github.com/Microsoft/malmo felhasználásával egy ágens példa, lásd pl.:
https://youtu.be/bAPSu3Rndi8, https://bhaxor.blog.hu/2018/11/29/eddig_csaltunk_de_innentol_mi,
https://bhaxor.blog.hu/2018/10/28/minecraft_steve_szemuvege


        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
    </section>
        

</chapter>                
