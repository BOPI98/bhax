<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>5. hét - „Helló, Stroustrup!”</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>

    <section>
        <title>JDK osztályok</title>
        <para>
            Írjunk olyan Boost C++ programot (indulj ki például a fénykardból) amely kilistázza a JDK összes osztályát (miután kicsomagoltuk az src.zip állományt, arra ráengedve)!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:    https://arato.inf.unideb.hu/batfai.norbert/UDPROG/deprecated/Prog1_5.pdf (16-22 fólia)
            
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat... : A feladat egy olyan c++ feladat amelyhez szükésg van boost függvényekre. A boostot
            terminal-ban le lehet tölteni install boost-tal. A feladatban a java forrásainak a fájljait kell megszámolnia a programnak.
            Ezt viszonylag könnyen meg lehet oldani a boost függvényekkel, mert például a fájl típusra, és a mappákra is vannak függványek 
            , melyeknek a használata felgyorsítja a folyamatot. A Java src-t külön le lehet tölteni, installer-rel vagy manuálisan is. A 
            program úgy számolja meg a java fájlokat, hogy egy voidban megírjuk a számláló függvényt, ami egy ciklusban végig megy a fájlokon
            és ha directory-t talál, akkor rekúrzívan meghívja önmagát és az önmagán belüli fájlokat vizsgálja. A main-en belül vesszük az 
            argv-t pwd-ként és a megadott mappán belül lefut a függvény. Kiiratásként a java fájlok számát kapjuk meg.
            
        </para>
        
        <mediaobject>
                <imageobject>
                    <imagedata fileref="boost.png" scale="20"/>
                </imageobject>
            </mediaobject>
        
    </section>        

    <section>
        <title>Másoló-mozgató szemantika
</title>
        <para>
            Kódcsipeteken (copy és move ctor és assign) keresztül vesd össze a C++11 másoló és a mozgató szemantikáját, a mozgató konstruktort alapozd a mozgató értékadásra!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat... : Ez a feladat már egy korábbi feladatban részletezve van, magyarázattal. 
            A kódok az lzw binfának a másoló konstuktora és az értékadása, mely arra szolgál, hogy egy binfát lemásoljunk. 
            A mozgató értékadás a két fa gyökerét cseréli meg, amelynek az az előnye, hogy a memóriában az adatok helye 
            egy helyen marad, a másik binfa adatai automatikusan törlődnek. 
            A bal értékű referenciát a kapcsolat az =-höz köti, mert ezeknek a kifejezéseknek értéket tud adni.
            A jobb értékadás ebből következően minden olyan kifejezés, amit értékül tud adni. A másoló konstruktor
            és az értékadás mind a két baloldalit, de a mozgatók jobboldali referenciát kérnek paraméterként.
            A másoló konstruktor csak a sima sekély másolást engedi, a mélyet meg kell írni.
            
        </para>
        
        <programlisting>
            <![CDATA[

LZWBinFa ( const LZWBinFa & regi ) {
std::cout << "LZWBinFa copy ctor called" << std::endl;
gyoker = masol(regi.gyoker, regi.fa);
}
Kisebb programokban elég a
*this=regi;
Meghívása a mainben:
LZWBinFa binFa3(binFa);

]]></programlisting>
        
        <para>
            A kódcsipetben látható, hogy a mélymásolást meghívja a konstruktor, ezzel duplikálva az objektumot.
            A lefoglalt memóriaterületre pedig létrehozzuk a binfa3-at az eredetiből.
            </para>
        
        <programlisting>
            <![CDATA[
        LZWBinFa& operator= ( const LZWBinFa & regi )
{
std::cout << "LZWBinFa copy assignment" << std::endl;
gyoker->balNulla = masol ( regi.gyoker->balNulla, regi.fa ←-
) ;
gyoker->jobbEgy = masol ( regi.gyoker->jobbEgy, regi.fa ) ←-
;
if ( regi.fa == regi.gyoker)
fa = gyoker;
return *this;
}
meghívása például
binfa4=binfa3;
]]>
        </programlisting>
        
        <para>
            Ez a kódcsipet tulajdonképpen végrehajt egy sekély másolást, ami azt takarja, hogy ugyan arra a  
            tároló egységre hivatkozik a másolt objektum mint az eredeti. Ennek csak annyi a hátulütője, hogy ha 
            az egyik módosul akkor minden módosul.
            </para>
        
        <programlisting>
            <![CDATA[
LZWBinFa (LZWBinFa && regi ){
std::cout<<"LZWBinFa move ctor called"<<std::endl;
gyoker = nullptr;
*this = std::move(regi);
}
meghívása mainben például:
LZWBinFa binfa5(std::move(binfa3));
LZWBinFa & operator= (LZWBinFa && regi){
std::swap(gyoker, regi.gyoker);
std::cout << "LZWBinFa move assignment" << std::endl;
return *this;
}
meghívása mainben példa:
binFa2=std::move(binFa);
]]>
        </programlisting>
    <para>
        Az alábbi kód a mozgató konstruktor értékadás. Ennek a lényege, hogy az erőforrást átcsoportosítjuk. 
        Így az az objektum amiből mozgatunk az üres lesz az új pedig feltöltődik az adattal, magyarán 
        átmozgattuk az adatot.
        </para>


        
    </section> 
    
    <section>
        <title>Hibásan implementált RSA törése
</title>
        <para>
        Készítsünk betű gyakoriság alapú törést egy hibásan implementált RSA kódoló: https://arato.inf.unideb.hu/batfai.norbert/UDPROG/deprecated/Prog2_3.pdf (71-73 fólia) által készített titkos szövegen.    
        
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
    </section> 
    
    <section>
        <title>Változó argumentumszámú ctor
</title>
        <para>
        Készítsünk olyan példát, amely egy képet tesz az alábbi projekt Perceptron osztályának bemenetére és a Perceptron ne egy értéket, hanem egy ugyanakkora méretű „képet” adjon vissza. (Lásd még a 4 hét/Perceptron osztály feladatot is.)
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:    <link xlink:href="https://github.com/BOPI98/prog2_feladatok/blob/master/Stroustrup/perceptron.cpp">link</link>          
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat... : A feladat egy már korábban elkészült feladatra épül, amely egy png kép 
            bemenetére egy double értéket adott vissza. Ez a feladat azonban egy ugyanakkora méretű képet kér kimenetbe. Az előzőhöz képest 
            a program annyit változott, hogy a .hpp fájlban egy generáló függvény jött létre, amely új adatot ad vissza. Az eredeti képet 
            úgy változtatja meg a program, hogy kiveszi a kép minden pixelének a zöld és a kék csatornáját és generál új adatot hozzá. 
            A program többi részében az új adatokkal a png++ segítségével elkészül az új png kép. 
            
        </para>
        
        <mediaobject>
                <imageobject>
                    <imagedata fileref="pic.png" scale="30"/>
                </imageobject>
            </mediaobject>
        
        <para>
            eredeti kép
            </para>
        
        <mediaobject>
                <imageobject>
                    <imagedata fileref="generated.png" scale="30"/>
                </imageobject>
            </mediaobject>
        <para>
            generált kép
            </para>
    </section> 
    
    <section>
        <title>Összefoglaló
</title>
        <para>
        Az előző 4 feladat egyikéről írj egy 1 oldalas bemutató „”esszé szöveget!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
    </section> 
        

</chapter>                
