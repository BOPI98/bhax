<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>6. hét - „Helló, Gödel!”</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>

    <section>
        <title>Gengszterek</title>
        <para>
          Gengszterek rendezése lambdával a Robotautó Világbajnokságban
https://youtu.be/DL6iQwPx1Yw (8:05-től)

        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:   
            
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat... : A robotautó alapvetően egy olyan program
            aminek a célja a forgalomirányítás szimulációja. A programban egy "gengszter"-t 
            követ egy rendőr(cop). Általános alak: [](int x, int y) { return x + y; }
            
            
        </para>
        
        <para>
            A szögletes zárójelben jelzi az elkövetkezendő lambda kifejezést. 
            Ezt követi maga a törzse a függvénynek, ahol a returnból kapja meg az értéket és a típust.
            A myshmclient.cpp-ben lambda kifejezéssel rendezzük a gangster vektort, ha közelebb van 
            az elkapott rendőr objekthez mint az y akkor igaz lesz. Rendezés után a rendőrhöz legközelebbi gengszter kerül a vektor elejére.
            
            </para>
        <para>
            std::sort (gangsters.begin(), gangsters.end(), [this, cop] (Gangster x, ←􏰀 Gangster y)
{
return dst (cop, x.to) < dst (cop, y.to);
});
                            
               //void sort (RandomAccessIterator first, RandomAccessIterator last, Compare ←􏰀 comp);             
            </para>
    </section>        

    <section>
        <title>C++11 Custom Allocator</title>
        <para>
            https://prezi.com/jvvbytkwgsxj/high-level-programming-languages-2-c11-allocators/ a
CustomAlloc-os példa, lásd C forrást az UDPROG repóban!

        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...: A c++ szabvány könyvtárai között megtalálhatóak az allokátor elemek is, melyek szerepe, hogy 
            a program futása közben megváltoztassuk az egyes konténerek méretét. Ennek a feladata az, hogy a tárolóra vonatkozó memória
            allokálását és a foglalások kérését kezelje. Alekszander Stepanovnak köszönhetőek az allokátorok, akinek az volt acélja, hogy
            a standard librarit tegye rugalmasabbá. Ezek mellett fontosnak tartotta, hogy független legyen az alap modelltől. Ennek az volt 
            az előnye, hogy egyedi mutatókat és referenciákat lehetett használni. 
        </para>
        
        <para>
            <programlisting>int main() {
    std::vector &lt;int> v;
    return 0;
}</programlisting>
        </para>

        <para>
            A következő program egy alapértelmezett allocatort használ és ezzel hozunk létre egy egyedi allokátort. A példában pedig 
            a a lefoglalt memória mennyiségét követik nyomon.
            </para>
        <para>
            
            <programlisting>#include &lt;iostream>
#include &lt;limits>
#include &lt;memory>
#include &lt;vector>
 
template&lt;class T>
class TrackingAllocator
{
public:
    using value_type = T;

    using pointer = T *;
    using const_pointer = const T *;
 
    using size_type = size_t;
 
    TrackingAllocator() = default;
 
    template&lt;class U>
    TrackingAllocator(const TrackingAllocator&lt;U> &amp;other) {}
 
    ~TrackingAllocator() = default;
 
    pointer allocate(size_type numObjects)
    {
        mAllocations += numObjects;
        return static_cast&lt;pointer>(operator new(sizeof(T) * numObjects));
    }
 
    void deallocate(pointer p, size_type numObjects)
    {
        operator delete(p);
    }
 
    size_type get_allocations() const
    {
        return mAllocations;
    }
 
private:
    static size_type mAllocations;
};
 
template&lt;class T>
typename TrackingAllocator&lt;T>::size_type TrackingAllocator&lt;T>::mAllocations = 0;
 
int main()
{
    std::vector&lt;int, TrackingAllocator&lt;int>> v(5);
    std::cout &lt;&lt; v.get_allocator().get_allocations() &lt;&lt; std::endl;
 
    return 0;
}</programlisting>

            </para>
        
        <para>
            A program két részből áll, egy lokátor skála,
            és ezt meghívjuk a main-ben a vektornál. Ezután tekintsük át a TrackingAllocator osztályt is. Ez az osztály azzal a feladattal
            van létrehozva, hogy a segítségével az allokátorok mennyiségét tudjuk követni.

            </para>
        
        
    </section>   
    
    <section>
        <title>STL map érték szerinti rendezése
 </title>
        <para>
            Például: https://github.com/nbatfai/future/blob/master/cs/F9F2/fenykard.cpp#L180

        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...: A standard template library egy c++ sablonoztály, amely biztosít általános 
            adatszerkezeteket és funkciókat, mint például listál, vagy tömbök. Ennek a könyvtárnak paraméterezett komponensei vannak,
            ez a négy elem amiből áll, a konténerek, az algoritmusok, a függvények és az iterátorok. Az algoritmusok a funkciógyűjteményeket
            határoz meg, amiket elemtartományokhoz hoztak létre. Ez biztosít eszközöket a konténerekhez, a műveletek érdekében, például a sort vagy search.
            Az stl tartalmaz olyan osztályokat, melyek leterhelik a funkcióhívó operátort, ezt hívjuk függvényobjektumoknak. Átaott paraméterekkel
            a funkciók lehetővé teszik a kapcsoló funkciók működését.
        </para>
    </section>  
    
    <section>
        <title>Alternatív Tabella rendezése
 </title>
        <para>
            Mutassuk be a https://progpater.blog.hu/2011/03/11/alternativ_tabella a programban a java.lang
Interface Comparable T szerepét!


        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
    </section>
    
    <section>
        <title>Prolog családfa </title>
        <para>
            Ágyazd be a Prolog családfa programot C++ vagy Java programba! Lásd para_prog_guide.pdf!

        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
    </section>
    
    <section>
        <title>GIMP Scheme hack </title>
        <para>
            Ha az előző félévben nem dolgoztad fel a témát (például a mandalás vagy a króm szöveges
dobozosat) akkor itt az alkalom!

        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
    </section>
        

</chapter>                
