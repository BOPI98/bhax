<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>7. hét - „Helló, !</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>

    <section>
        <title>FUTURE tevékenység editor</title>
        <para>
          Javítsunk valamit a ActivityEditor.java JavaFX programon!
https://github.com/nbatfai/future/tree/master/cs/F6
Itt láthatjuk működésben az alapot: https://www.twitch.tv/videos/222879467
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:   
            
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
    </section>        

    <section>
        <title>OOCWC Boost ASIO hálózatkezelése</title>
        <para>
            Mutassunk rá a scanf szerepére és használatára! https://github.com/nbatfai/robocaremulator/blob/master/justine/rcemu/src/carlexer.ll
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat... : A scanf függvény az inputról való beolvasásra használatos. 
            A scanf alapvetően négy adatot vesz be a beolvasáshoz. A robotautó myshmclient.cpp fájljában egy while 
            ciklusban olvas be a program adatot az inputról. Mivel a tesztelésben található a scanf, így 
            a sikeres beolvasás után mindig ismétlődni fog. Ezt a scanf visszatérő értékéből dönti el a tesztelés.
            Beolvasás során egy n nevű int változóba megszámlálódik, hány beolvasott adat érkezett, majd ezeket 
            összeadja egy nn változóba. A data+nn megadja hogy melyik sornál tartott a beolvasás, így nem lesz beolvasva
            ugyanaz a sor mégegyszer.
            
        </para>
        
        <programlisting>
            <![CDATA[
std::vector<justine::sampleclient::MyShmClient::Gangster> ←-
justine::sampleclient::MyShmClient::gangsters ( boost::asio ←-
::ip::tcp::socket & socket, int id,
osmium::unsigned_object_id_type cop )
while ( std::sscanf ( data+nn, "<OK %d %u %u %u>%n", &idd, &f, ←-
&t, &s, &n ) == 4 )
{
nn += n;
gangsters.push_back ( Gangster {idd, f, t, s} );
}
]]></programlisting>
        
    </section>   
    
    <section>
        <title>SamuCam
 </title>
        <para>
            Mutassunk rá a webcam (pl. Androidos mobilod) kezelésére ebben a projektben:
https://github.com/nbatfai/SamuCam
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat... : A SamuCam egy olyan program, amely egy webkamera adatait közvetíti
            megjelenítésre. A program lefuttatásnál argumentumban egy ip-címről fogja megnyitni a kamerát. A kamerát 
            az opencv segítségével tudjuk megnyitni a videocapture.open függvénnyel, itt ha az ip helyére 0-át írunk akkor 
            nem ipről, hanem eszközről szerzi az adatot. 
            
            Az opencv-ben egy cascadeclassifier metódussal ismertetjük fel az objektumot, majd egy xml-t megadunk neki és 
            az arcfelismerés létre is jön. Ezt követi a hibakezelés, majd egy n dimenziós mártixban eltároljuk a képadatokat.
            
            A program lényegesebb része a while ciklus ami addig fut amíg a webkamera küldi az adatokat. A 
            cv::resize() újra méretezi a képet, a cv::INTER_CUBIC pedig elkészíti a pixeleket a képen. 
            
        </para>
    </section>  
    
    <section>
        <title>BrainB
 </title>
        <para>
            Mutassuk be a Qt slot-signal mechanizmust ebben a projektben: https://github.com/nbatfai/esporttalent-search

        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...: A brainb egy képességfelmérésről szóló program, ami azt méri
            , hogy egy objektumot milyen pontossággal tud lekövetni a játékos. A program futása során az egerünket 
            egy konkrét objektumon kell tartani, miközben több másik is mejelenik a képernyőn. 
            Ezt a folyamatot 10 percig kell csinálnia az alanynak. Ezután a program kiirja az eredményt.
            
            
            A programban az objektumok közötti kommunikációt a 
            qt slot signallal hozzuk létre. A függvény akkor lesz meghívva, ha egy esemény bekövetkezik, 
            amiről a kód küld egy emitet, amikből a megfelelőt befogja a connect. 
            A SIGNAL() függvényben megadjuk, hogy a heroesChanged jeltől milyen paramétert várunk. 
            Majd a SLOT- függvényt lefuttatjuk updateHeroes()-al és annak paramétereivel.
            Ez után ismét egy hasonló connect függvény következik ahol a SIGNAL-ban egy endAndStats 
            függvény található, mely leállítja a programot és kiírja az eredményt.
            
            
        </para>
        
        <programlisting><![CDATA[
void heroesChanged ( const QImage &image, const int &x, const int &y );
void endAndStats ( const int &t );
]]></programlisting>
        <para>
            Az alábbi kódcsipetben a két void közül az első az amikor az objektum mozog.
            A másik pedig az a függvény ami kiírja az eredményt a programfutása végén.
            Signal hívásnál érdemes az emit-et használni egyszerűség szempontjából.
            
            </para>
        
        <programlisting><![CDATA[
emit heroesChanged ( dest, heroes[0].x, heroes[0].y );
emit endAndStats ( endTime );
]]></programlisting>
            <para>
                A signal a connect-el fog kapcsolódni a slothoz, ezt a signalt akkor kell meghívni, ha egy signal bekövetkezik.
                Az alábbi kódban mint látszik a slotnak és signaloknak a felépítésének meg kell egyezniük.
                </para>
            
        <programlisting><![CDATA[
connect ( brainBThread, SIGNAL ( heroesChanged ( QImage, int, int ) ),
this, SLOT ( updateHeroes ( QImage, int, int ) ) );
connect ( brainBThread, SIGNAL ( endAndStats ( int ) ),
this, SLOT ( endAndStats ( int ) ) );
]]></programlisting>
    </section>
    
    <section>
        <title>OSM térképre rajzolása</title>
        <para>
            Debrecen térképre dobjunk rá cuccokat, ennek mintájára, ahol én az országba helyeztem el a DEAC
hekkereket: https://www.twitch.tv/videos/182262537 (de az OOCWC Java Swinges
megjelenítőjéből: https://github.com/nbatfai/robocar-emulator/tree/master/justine/rcwin is
kiindulhatsz, mondjuk az komplexebb, mert ott időfejlődés is van...)
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
    </section>
    
    
        

</chapter>                
