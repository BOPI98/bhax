<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>2. hét - „Helló, Liskov!”</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>

    <section>
        <title>Liskov helyettesítés sértése</title>
        <para>
            Írjunk olyan OO, leforduló Java és C++ kódcsipetet, amely megsérti a Liskov elvet! Mutassunk rá a
megoldásra: jobb OO tervezés.

        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:    https://arato.inf.unideb.hu/batfai.norbert/UDPROG/deprecated/Prog2_1.pdf (93-99 fólia)
(számos példa szerepel az elv megsértésére az UDPROG repóban, lásd pl. source/binom/BatfaiBarki/madarak/)
            
        </para>
        
        <para>
            
            <link xlink:href="https://github.com/BOPI98/prog2_feladatok/blob/master/madar.java">linkhttps://github.com/BOPI98/prog2_feladatok/blob/master/madar.java</link>
            </para>
        
        <para>
            Tanulságok, tapasztalatok, magyarázat... : Barabara Liskov egy amarikai informatikus volt aki kidolgozta a liskov
            helyettesítési elvet. Ez az elv arról szól, hogy egy T objektum S altípusát minden olyan helyre behelyettesíthetjük, ahol
            T szerepel, mindezt a programrész tulajdonságainak megváltoztatásai nélkül. Ezt úgy kell elképzelni, mint például 
            a madarakat. Ha létre hozunk egy madár típust és a madár tud repülni, akkor az annak egy altípusa, egy sas is tud repülni.
            Itt következik az elv megsértése, mikor ugyanis egy madarak csoportjába tartozó pingvinre cseréljük ki az altípust. Ezúttal
            viszont az a probléma, hogy a pingvin nem tud repülni. Ezt a problémár orvosolni tudjuk azzal hogy a madarakat két osztályra 
            bontjuk, repülésre képes és képtelen madarak típusára.
        </para>
    </section>        

    <section>
        <title>Szülő-gyerek
</title>
        <para>
            Írjunk Szülő-gyerek Java és C++ osztálydefiníciót, amelyben demonstrálni tudjuk, hogy az ősön
keresztül csak az ős üzenetei küldhetőek!

        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása: https://arato.inf.unideb.hu/batfai.norbert/UDPROG/deprecated/Prog2_1.pdf (98. fólia)               
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
    </section>  
    
     <section>
        <title>Anti OO
</title>
        <para>
            A BBP algoritmussal4
a Pi hexadecimális kifejtésének a 0. pozíciótól számított 106, 107, 108 darab
jegyét határozzuk meg C, C++, Java és C# nyelveken és vessük össze a futási időket!
https://www.tankonyvtar.hu/hu/tartalom/tkt/javat-tanitok-javat/apas03.html#id561066

        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:              
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
    </section>  
    
     <section>
        <title>deprecated - Hello, Android!

</title>
        <para>
           Élesszük fel a https://github.com/nbatfai/SamuEntropy/tree/master/cs projektjeit és vessünk össze
néhány egymásra következőt, hogy hogyan változtak a források


        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:              
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
    </section>  
        
      <section>
        <title>Hello, Android!
</title>
        <para>
            Élesszük fel az SMNIST for Humans projektet!
https://gitlab.com/nbatfai/smnist/tree/master/forHumans/SMNISTforHumansExp3/app/src/main
Apró módosításokat eszközölj benne, pl. színvilág.


        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:             
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
    </section>  
    
     <section>
        <title>Hello, SMNIST for Humans!

</title>
        <para>
           Fejleszd tovább az SMNIST for Humans projektet SMNIST for Anyone emberre szánt appá! Lásd
az smnist2_kutatasi_jegyzokonyv.pdf-ben a részletesebb hátteret!


        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:               
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
    </section>  
    
     <section>
        <title>Ciklomatikus komplexitás
</title>
        <para>
            Számoljuk ki valamelyik programunk függvényeinek ciklomatikus komplexitását! Lásd a fogalom
tekintetében a https://arato.inf.unideb.hu/batfai.norbert/UDPROG/deprecated/Prog2_2.pdf (77-79
fóliát)!


        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
    </section>  
</chapter>                
