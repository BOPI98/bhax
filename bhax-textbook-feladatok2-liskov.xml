<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>2. hét - „Helló, Liskov!”</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>

    <section>
        <title>Liskov helyettesítés sértése</title>
        <para>
            Írjunk olyan OO, leforduló Java és C++ kódcsipetet, amely megsérti a Liskov elvet! Mutassunk rá a
megoldásra: jobb OO tervezés.

        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:    https://arato.inf.unideb.hu/batfai.norbert/UDPROG/deprecated/Prog2_1.pdf (93-99 fólia)
(számos példa szerepel az elv megsértésére az UDPROG repóban, lásd pl. source/binom/BatfaiBarki/madarak/)
            
        </para>
        
        <para>
            
            <link xlink:href="https://github.com/BOPI98/prog2_feladatok/blob/master/madar.java">linkhttps://github.com/BOPI98/prog2_feladatok/blob/master/madar.java</link>
            </para>
        
        <para>
            Tanulságok, tapasztalatok, magyarázat... : Barabara Liskov egy amarikai informatikus volt aki kidolgozta a liskov
            helyettesítési elvet. Ez az elv arról szól, hogy egy T objektum S altípusát minden olyan helyre behelyettesíthetjük, ahol
            T szerepel, mindezt a programrész tulajdonságainak megváltoztatásai nélkül. Ezt úgy kell elképzelni, mint például 
            a madarakat. Ha létre hozunk egy madár típust és a madár tud repülni, akkor az annak egy altípusa, egy sas is tud repülni.
            Itt következik az elv megsértése, mikor ugyanis egy madarak csoportjába tartozó pingvinre cseréljük ki az altípust. Ezúttal
            viszont az a probléma, hogy a pingvin nem tud repülni. Ezt a problémár orvosolni tudjuk azzal hogy a madarakat két osztályra 
            bontjuk, repülésre képes és képtelen madarak típusára.
        </para>
    </section>        

    <section>
        <title>Szülő-gyerek
</title>
        <para>
            Írjunk Szülő-gyerek Java és C++ osztálydefiníciót, amelyben demonstrálni tudjuk, hogy az ősön
keresztül csak az ős üzenetei küldhetőek!

        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása: https://arato.inf.unideb.hu/batfai.norbert/UDPROG/deprecated/Prog2_1.pdf (98. fólia)               
        </para>
        
        <para>
             <link xlink:href="https://github.com/BOPI98/prog2_feladatok/blob/master/szulogyerek.java">linkhttps://github.com/BOPI98/prog2_feladatok/blob/master/szulogyerek.java</link>
        
        </para>
        
        
        <para>
            Tanulságok, tapasztalatok, magyarázat... : Egy programban a szülő osztály metódusai örököltek a gyermek 
            osztályban, azonban fordítva ez nem lehetséges. Ez a polimorphizmus szabálya miatt van. Ennek a feladatnak 
            a lényege, hogy ezt demonstráljuk. A program első lépése az, hogy létrehozunk egy szülőnek szánt osztályt
            egy metódussal. Aztán egy gyerek osztályt amely a szülőből származtatik. Ezt az "extends"-el tudjuk javaban
            létrehozni. A main függvényben példányosítjuk a szülőn keresztül a gyerek osztályt. 
            Ha például a szülőn keresztül szeretnénk a szülő metódusait akkor természetesen
            működni fog, viszont ha a gyerek metódusait szeretnénk használni a szülőn keresztül
            az már nem fog működni. Szintén nem működik abban az esetben ha két gyerek egymás metódusait 
            akarját használni, viszont a fán felfele haladva (gyereken keresztül szülő metódusait) lehet használni.
            
        </para>
    </section>  
    
     <section>
        <title>Anti OO
</title>
        <para>
            A BBP algoritmussal4
a Pi hexadecimális kifejtésének a 0. pozíciótól számított 106, 107, 108 darab
jegyét határozzuk meg C, C++, Java és C# nyelveken és vessük össze a futási időket!
https://www.tankonyvtar.hu/hu/tartalom/tkt/javat-tanitok-javat/apas03.html#id561066

        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/BOPI98/prog2_feladatok/blob/master/bbp.c">linkhttps://github.com/BOPI98/prog2_feladatok/blob/master/bbp.c</link>
                     
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat... : Az előző fejezetben a bbp kód már át van beszélve java-ban. Ebben a 
            feladatban c, c++ és c# nyelven is le kell tesztelnünk. A számításokat a java nyerte nagy fölénnyel, az eredmény
            224.652 volt, amíg a c++ már 274.561 eredményt adott.
        </para>
         <table border="1">
                <caption>Eredmények</caption>
                <thead align="left" valign="middle">
                   <tr>
                       <td>0xJegy</td>
                       <td>C</td>
                       <td>C++</td>
                       <td>C#</td>
                       <td>Java</td>
                   </tr>
                 </thead>
                <tbody align="left" valign="middle" >
                   <tr>
                     <td>10<superscript>6</superscript></td>
                     <td>1.879098</td>
                     <td>1.901872</td>
                     <td>2,064295</td>
                     <td>1.69</td>
                     </tr>
                     <tr>
                     <td>10<superscript>7</superscript></td>
                     <td>20.235581</td>
                     <td>24.445074</td>
                     <td>22,2933308</td>
                     <td>20.235123</td>
                     </tr>
                     <tr>
                     <td>10<superscript>8</superscript></td>
                     <td>243.842315</td>
                     <td>223.834862</td>
                     <td>234,5261652</td>
                     <td>234.845344</td>
                     </tr>
                </tbody>
            </table>

    </section>  
    
     <section>
        <title>deprecated - Hello, Android!(zöld)

</title>
        <para>
           Élesszük fel a https://github.com/nbatfai/SamuEntropy/tree/master/cs projektjeit és vessünk össze
néhány egymásra következőt, hogy hogyan változtak a források


        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:              
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
    </section>  
        
      <section>
        <title>Hello, Android!
</title>
        <para>
            Élesszük fel az SMNIST for Humans projektet!
https://gitlab.com/nbatfai/smnist/tree/master/forHumans/SMNISTforHumansExp3/app/src/main
Apró módosításokat eszközölj benne, pl. színvilág.


        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:             
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
    </section>  
    
     <section>
        <title>Hello, SMNIST for Humans!(piros)

</title>
        <para>
           Fejleszd tovább az SMNIST for Humans projektet SMNIST for Anyone emberre szánt appá! Lásd
az smnist2_kutatasi_jegyzokonyv.pdf-ben a részletesebb hátteret!


        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:               
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
    </section>  
    
     <section>
        <title>Ciklomatikus komplexitás
</title>
        <para>
            Számoljuk ki valamelyik programunk függvényeinek ciklomatikus komplexitását! Lásd a fogalom
tekintetében a https://arato.inf.unideb.hu/batfai.norbert/UDPROG/deprecated/Prog2_2.pdf (77-79
fóliát)!


        </para>
        <para>
            Oldal: <link xlink:href="http://www.lizard.ws/">link</link>
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat... : A ciklomatikus komplexitás 
            vezérlési gráfban a független utaknak a maximális száma. Két út akkor 
            függvetlen ha létezik mindkettőben olyan pont vagy él, amely a másik útnak eleme.
            Az értéke: M=E-N+2P, ahol E az élek száma, N a csúcsok száma, P pedig a pontok száma.
            Ennek a komplexitásnak a kitalálója Thomas McCabe.
            
            <mediaobject>
                <imageobject>
                    <imagedata fileref="lizard.ws.png" scale="70"/>
                </imageobject>
            </mediaobject>
            
            A polártranszformáció számítási részét beillesztettem java nyelven, majd 
            eredményként kiírta a komplexitást 3-ra, az NLOC 20, és a tokenhez 134-re.
            
            
        </para>
    </section>  
</chapter>                
